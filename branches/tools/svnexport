<?php
include 'functions.php';
/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 * svn log -r {2013-12-20}:{2014-12-01} | grep -B2 longnc
 */
if(isset($argv[1]) && ($argv[1] == '--help' || $argv[1] == '--h')) {
    echo PHP_EOL;
    echo2('Description : export files change in revisions');
    echo2('Usage : php ~/tools/svnexport [OPTIONS]');
    echo2('Examples :');
    echo2('   svnexport  -> HEAD revision');
    echo2('   svnexport --r 15451,15453,15455');
    echo PHP_EOL;
    exit;
}
try {
    $output = array();
    exec("svn info",$output);
    $workingPath = '';
    $URL = '';
    $HEAD = '';
    foreach ($output as $value) {
        $pos = false;
        if(($pos = stripos($value,'Working Copy Root Path:')) !== false) {
            $workingPath = trim(str_replace('Working Copy Root Path:', '', $value));
        } elseif(($pos = stripos($value,'URL:')) !== false) {
            $URL = trim(str_replace('URL:', '', $value));
        } if(($pos = stripos($value,'Revision:')) !== false) {
            $HEAD = Core_Number::parseInt(str_replace('Revision:', '', $value));
        }
    }
    if(empty($workingPath) || empty($URL) || $HEAD == 0) {
        throw new Exception('Invalid repository');
    }
    $deployFolder = '/home/localadm/deploys/new/';
    $folders = array(
        'application/',
        'library/',
        'public_html_ib/',
        'public_html',
        'public_html_pay',
        'public_html_vip123pay'
    );
    chdir($workingPath);
    $args = parseArgs($argv);
    if(!isset($args['r']) || empty($args['r'])) {
        $str_revision = 'HEAD';
    } else {
        $str_revision = $args['r'];
    }
    echo2('Revisions : '.$str_revision);
    $revisions = split(',', $str_revision);
    rsort($revisions);
    $changeFiles = array();
    foreach ($revisions as $revision) {
        $outputs = array();
        exec("svn log --verbose -r {$revision} | grep /",$outputs);
        foreach ($outputs as $file) {
            $file = trim($file);
            $arr = split(' ', $file);
            if($arr[0] != 'D') {
                $file = trim($arr[1]);
                $pos = false;
                foreach ($folders as $folder) {
                    if(($pos = stripos($file,$folder)) !== false) {
                        break;
                    }
                }
                if($pos !== false) {
                    $file = substr($file, $pos);
                    if(isset($changeFiles[$file]) && $changeFiles[$file] > $revision) {
                        $revision = $changeFiles[$file];
                    }
                    $changeFiles[$file] = $revision;
                }
            }
            
        }
    }
    exec("rm -rvf {$deployFolder}*");
    echo PHP_EOL;
    foreach ($changeFiles as $file => $revision) {
        $svnPath = $URL.'/'.$file;
        echo2('Exporting file '.$svnPath.':'.$revision.'...');
        $fileDir = getDir($file);
        if(empty($fileDir)) {
            throw new Exception('Empty dir of file '.$file);
        }
        $fileDir = $deployFolder.$fileDir;
        if(!is_dir($fileDir)) {
            exec("mkdir -p ".$fileDir);
        }
        exec("svn export --force -r {$revision} {$svnPath} {$fileDir}");
    }
    echo PHP_EOL;
    echo 'Done'.PHP_EOL;
} catch (Exception $exc) {
    echo2('Error : '.$exc->getMessage());
}

