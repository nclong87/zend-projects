<?php
include 'functions.php';
/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 * svn log -r {2013-12-20}:{2014-12-01} | grep -B2 longnc
 */
$args = parseArgs($argv);
if(empty($args) || (isset($argv[1]) && ($argv[1] == '--help' || $argv[1] == '--h'))) {
    echo PHP_EOL;
    echo2('Description : deploy files change in revisions');
    echo2('Usage : php ~/tools/svndeploy [OPTIONS]');
    echo2('Examples :');
    echo2('   php ~/tools/svndeploy -d ~/VNG/CS/production/internal.api.myplus.vn/ -r 2530,2531');
    echo PHP_EOL;
    exit;
}
try {
    $output = array();
    exec("svn info",$output);
    $workingPath = '';
    $URL = '';
    $HEAD = '';
    foreach ($output as $value) {
        $pos = false;
        if(($pos = stripos($value,'Working Copy Root Path:')) !== false) {
            $workingPath = trim(str_replace('Working Copy Root Path:', '', $value));
        } elseif(($pos = stripos($value,'Repository Root:')) !== false) {
            $URL = trim(str_replace('Repository Root:', '', $value));
        } if(($pos = stripos($value,'Revision:')) !== false) {
            $HEAD = Core_Number::parseInt(str_replace('Revision:', '', $value));
        }
    }
    if(empty($workingPath) || empty($URL) || $HEAD == 0) {
        throw new Exception('Invalid repository');
    }
    $dest = safe_get($args, 'd');
    if(empty($dest) || !is_dir($dest)) {
        throw new Exception('Invalid destination deploy space!');
    }
    if(strrpos($dest, '/') < strlen($dest) - 1) {
        $dest.='/';
    }
    $deployFolder = '/home/localadm/deploys/new/';
    $backupFolder = '/home/localadm/deploys/backups/';
    $folders = array(
        'application/',
        'library/',
        'public_html_ib/',
        'public_html',
        'public_html_pay',
        'public_html_vip123pay'
    );
    chdir($workingPath);
    if(!isset($args['r']) || empty($args['r'])) {
        $str_revision = 'HEAD';
    } else {
        $str_revision = $args['r'];
    }
    echo2('Revisions : '.$str_revision);
    $revisions = split(',', $str_revision);
    rsort($revisions);
    $changeFiles = array();
    foreach ($revisions as $revision) {
        $outputs = array();
        exec("svn log --verbose -r {$revision} | grep /",$outputs);
        foreach ($outputs as $file) {
            $file = trim($file);
            $arr = split(' ', $file);
            if($arr[0] != 'D') {
                $file = trim($arr[1]);
                //$file = $URL.$file;
                if(isset($changeFiles[$file]) && $changeFiles[$file] > $revision) {
                    $revision = $changeFiles[$file];
                }
                $changeFiles[$file] = $revision;
                $pos = false;
                foreach ($folders as $folder) {
                    if(($pos = stripos($file,$folder)) !== false) {
                        break;
                    }
                }
                if($pos !== false) {
                    
                }
            }
            
        }
    }
    if(!empty($changeFiles)) {
        //create backup files
        //include_once 'Zend/Date.php';
       // $date = new Zend_Date();
       // $backupFolder = $backupFolder.$date->toString('yMMddHHmmss').'/';
        //exec("mkdir {$backupFolder}");
        exec("rm -rvf {$backupFolder}*");
        $output = array();
        exec("svn update ".$dest,$output);
        if(!isset($output[0]) || stripos($output[0], 'Updating') === false) {
            throw new Exception('Destination folder is not subversion folder!');
        } else {
            foreach ($output as $value) {
                echo2($value);
            }
        }
        echo PHP_EOL;
        chdir($dest);
        $folders = getFolders($dest);
        $lastFolderInDest = $folders[0];
        foreach ($changeFiles as $file => $revision) {
            //exec("cp --parent {$file} {$backupFolder}");
            $svnPath = $URL.$file;
            echo2('Deploying file '.$svnPath.':'.$revision.'...');
            $tmpPath = array();
            $folders = getFolders($file);
            foreach ($folders as $value) {
                if($value == $lastFolderInDest) {
                    break;
                }
                $tmpPath[] = $value;
            }
            $tmpPath = array_reverse($tmpPath);
            $tmpPath = join('/',$tmpPath);
            $file = $dest.$tmpPath;
            $fileDir = getDir($file);
            if(!is_dir($fileDir)) {
                exec('mkdir '.$fileDir);
            }
            //echo2("svn export --force -r {$revision} {$svnPath} {$file}");
            exec("svn export --force -r {$revision} {$svnPath} {$file}");
        }
    }
    echo PHP_EOL;
    echo 'Done'.PHP_EOL;
} catch (Exception $exc) {
    echo2('Error : '.$exc->getMessage());
}

